generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Channel {
    id   String       @id @default(uuid())
    name String
    type Channel_type @default(TEXT)

    profileId String
    Profile   Profile @relation(fields: [profileId], references: [id])

    serverId String
    Server   Server @relation(fields: [serverId], references: [id])

    Message Message[]

    createdAt DateTime  @default(now())
    updatedAt DateTime?

    @@index([profileId])
    @@index([serverId])
}

model Member {
    id   String     @id @default(uuid())
    role MemberRole @default(GUEST)

    profileId String
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    serverId String
    server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

    Message                Message[]
    conversationsInitiated Conversation[]  @relation("MemberOne")
    conversationsReceived  Conversation[]  @relation("MemberTwo")
    DirectMessage          DirectMessage[]

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    @@index([profileId])
    @@index([serverId])
}

model Profile {
    id       String @id @default(uuid())
    userId   String @unique
    name     String
    imageUrl String @db.Text
    email    String @db.Text

    servers  Server[]
    members  Member[]
    channels Channel[]

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
}

model Server {
    id         String @id @default(uuid())
    name       String
    imageUrl   String @db.Text
    inviteCode String @unique

    profileId String
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    members  Member[]
    channels Channel[]

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    @@index([profileId])
}

model Message {
    id      String @id @default(uuid())
    content String @db.Text

    fileUrl String? @db.Text

    memberId String
    member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

    channelId String
    channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

    deleted Boolean @default(false)

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    @@index([memberId])
    @@index([channelId])
}

model Conversation {
    id String @id @default(uuid())

    memberOneId String
    memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

    memberTwoId String
    memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

    DirectMessage DirectMessage[]

    @@unique([memberOneId, memberTwoId])
    @@index([memberTwoId])
}

model DirectMessage {
    id      String @id @default(uuid())
    content String @db.Text

    fileUrl String? @db.Text

    memberId String
    member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

    conversationId String
    conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

    deleted Boolean @default(false)

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    @@index([memberId])
    @@index([conversationId])
}

enum MemberRole {
    ADMIN
    MODERATOR
    GUEST
}

enum Channel_type {
    TEXT
    AUDIO
    VIDEO
}

// ASK PDF TABLES

model AskPDF_User {
    id    String @id @unique // matches kinde user id
    email String @unique

    File    AskPDF_File[]
    Message AskPDF_Message[]

    stripeCustomerId       String?   @unique @map(name: "stripe_customer_id") // stripe customer id
    stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id") // stripe subscription id
    stripePriceId          String?   @unique @map(name: "stripe_price_id") // stripe price id
    stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end") // stripe current period end
}

enum AskPDF_UploadStatus {
    PENDING
    PROCESSING
    FAIL
    SUCCESS
}

model AskPDF_File {
    id            String              @id @default(cuid())
    name          String
    uploadStatus  AskPDF_UploadStatus @default(PENDING)
    url           String
    key           String
    messages      AskPDF_Message[]
    createdAt     DateTime            @default(now())
    updatedAt     DateTime            @updatedAt
    AskPDF_User   AskPDF_User?        @relation(fields: [askPDF_UserId], references: [id])
    askPDF_UserId String?

    @@index([askPDF_UserId])
}

model AskPDF_Message {
    id   String @id @default(cuid())
    text String @db.Text

    isUserMessage Boolean
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    AskPDF_User   AskPDF_User? @relation(fields: [askPDF_UserId], references: [id])
    askPDF_UserId String?
    AskPDF_File   AskPDF_File? @relation(fields: [askPDF_FileId], references: [id])
    askPDF_FileId String?

    @@index([askPDF_UserId])
    @@index([askPDF_FileId])
}
